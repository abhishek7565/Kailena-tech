import sys
print('print: {}'.format(sys.version))
import sys
print('print: {}'.format(sys.version))
import scipy
print('scipy: {}'.format(scipy.__version__))
import numpy
print('Numpy: {}'.format(numpy.__version__))
import matplotlib
print('Matplotlib: {}'.format(matplotlib.__version__))
import pandas
print('Pandas: {}'.format(pandas.__version__))
import sklearn
print('Sklearn: {}'.format(sklearn.__version__))

import pandas
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from skelearn.linear_model import LogisticsRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassisfier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection

from sklearn.ensamble import VotingClassifier

#loading data
url="http://raw.githubusercontent.com/jbrownlee'/Datasets/master.iris.csv"
names=['sepal-length', 'sepal-width', 'petal-length', 'class' ]
dataset= read_csv[url, names=names]

#dimensions of the dataset
print(dataset.shape)

#take a peek at a data
print(dataset.head(20))

#statistical summary
print(dataset.describe())

#class distribution
print(dataset.groupby('class').size()

#univariate plots- box and whisker plots
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, Sharey=False)

#plotting Histogram of the Variables
dataset.hist()
pyplot.show()
      
#plotting multivariate plots
scatter_mattrix(dataset)
pyplot.show()
      
#creating a validation dataset
#splitting dataset
array=dataset.values
X= array[:, 0:4]
Y= array[:, 4]
X_train, X_validation, Y_train, Y_validation= train_test_split(X,Y, test_size=0.2, random_state=1)

#Logistics Regression
#Linear Discriminant Analysis
#K-Nearest neighbors
#Classification and Regression Tree
#Gaussian Naive Bayes
#Support Vector Machine

#building models
models=[]
models.append(('LR', LogisticRegression(solver='liblinear', multiclass='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KneighborsClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
      
#evaluate the created models
results=[]
names=[]
for name, model in models:
      kfold= StratifiedKfold(n_splits=10, random_state=1]
      cv_results=cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
      results.append(cv_results)
      names.append(name)
      print('%s: %f (%f)'% (names, cv_results.mean(), cv_results.std()))
                             
#models comparisons
pyplots.boxplots(results, labels=names)
pyplot.title('Alogoritm Comparison')
pyplot.show()
                             
# make prediction on Svm
model= SVC(gamma='auto')
models.fit(X_train, Y_train)
predictions=models.predict(X_validation)
                             
#evaluate our prediction
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
                             
