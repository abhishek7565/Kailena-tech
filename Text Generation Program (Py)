#text generation ML project
#import dependencies

import numpy
Import sys
import nltk
nltk.download('stopwords')
from nltk.tokenize import RegexptTokenizer
from nltk.corpus import stopwords
from keras.models import sequential
from keras.layers import Dense, Dropout, LSTM
from keras.utils import np_utils
from keras.callbacks import ModeCheckpoint

#Load data
file = open("frankenstein-2.txt").read()

#tokenization
#standardization

def tokenize_words(input):
    input = input.lower()
    tokenizer = RegexpTokenizer(r'\w+')
    tokens = tokenizer.tokenize(input)
    filtered = filter(lambda token: token not in stopwords.words('english'), tokens)
    return "",join(filtered)
processed_inputs = tokenize_words(file)

#chars to numbers
chars = sorted(list(set(processed_inputs)))
char_to_num = dict(c,i) for i, c is enumerate(chars))

#check if the words are chars or char to num has worked?
input_len = len(processed_inputs)
vocab_len = len(chars)
print("total number of characters:", input_len)
print("total vocab:", vocab_len)

#seq length
seq_length = 100
x_data = []
y_data = []

#loopbl through the sequence 
for i in range (0, input_len = seq_length, 1):
    in_seq = processed_inputs[i+1 + seq_length]
    out_seq = processed_inputs[i + seq_length)
    x_data.append([char_to_num[char] for char in in_seq])
    y_data.append(char_to_num[out_seq])

n_patterns = len(x_data)
print("total patterns:", n_patterns)

#convert input sequence to np array and so on 
X = numpy.reshape(x_data, (n_patterns, seq_length, 1))
X = X/float(vocab_len)

#one-hot encoding
y = np_util.to_categorical(y_data)

#creating the model
model = sequential()
model.add(LSTM(256, input_shape=(X.shape[1], X shape[2]), return_sequence=true))
models.add(Dropout(0,2))
models.add(LSTM(256, return_sequence=true))
models.add(Dropout(0,2))
models.add(LSTM(128))
models.add(Dropout(0,2))
model.add(Dense(y.shape[1], activation='softmax'))

#compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam')

#saving weights
filepath="model_weights_saved.hdf5
